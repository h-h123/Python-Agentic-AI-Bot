```python
import os
import logging
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class Config:
    # Database Configuration
    DB_HOST = os.getenv('DB_HOST', 'localhost')
    DB_PORT = os.getenv('DB_PORT', '5432')
    DB_NAME = os.getenv('DB_NAME', 'railway_reservation')
    DB_USER = os.getenv('DB_USER', 'postgres')
    DB_PASSWORD = os.getenv('DB_PASSWORD', 'postgres')
    DB_CONNECTION_STRING = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

    # Application Configuration
    SECRET_KEY = os.getenv('SECRET_KEY', 'your-secret-key-here')
    DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')
    MAX_SEATS_PER_BOOKING = int(os.getenv('MAX_SEATS_PER_BOOKING', '6'))

    # Logging Configuration
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
    LOG_FILE = os.getenv('LOG_FILE', 'railway_reservation.log')
    LOG_MAX_SIZE = int(os.getenv('LOG_MAX_SIZE', '10485760'))  # 10MB
    LOG_BACKUP_COUNT = int(os.getenv('LOG_BACKUP_COUNT', '5'))

    # Payment Configuration
    PAYMENT_GATEWAY_URL = os.getenv('PAYMENT_GATEWAY_URL', 'https://api.payment-gateway.example.com')
    PAYMENT_TIMEOUT = int(os.getenv('PAYMENT_TIMEOUT', '30'))

    # Seat Configuration
    SEAT_TYPES = ['WINDOW', 'AISLE', 'MIDDLE']
    SEAT_CLASSES = ['ECONOMY', 'BUSINESS', 'FIRST']
    SEAT_LOCK_TIMEOUT = int(os.getenv('SEAT_LOCK_TIMEOUT', '300'))  # 5 minutes in seconds

    # Train Configuration
    MAX_TRAINS = int(os.getenv('MAX_TRAINS', '100'))
    MAX_COACHES_PER_TRAIN = int(os.getenv('MAX_COACHES_PER_TRAIN', '20'))
    SEATS_PER_COACH = int(os.getenv('SEATS_PER_COACH', '80'))

def configure_logging():
    """Configure logging for the application."""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=Config.LOG_LEVEL, format=log_format)

    # File handler with rotation
    file_handler = RotatingFileHandler(
        Config.LOG_FILE,
        maxBytes=Config.LOG_MAX_SIZE,
        backupCount=Config.LOG_BACKUP_COUNT
    )
    file_handler.setFormatter(logging.Formatter(log_format))
    file_handler.setLevel(Config.LOG_LEVEL)

    # Add handler to the root logger
    logging.getLogger().addHandler(file_handler)

    return logging.getLogger(__name__)
```